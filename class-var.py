## 클래스 변수
## 인스턴스 변수와는 다르게 같은 클래스로 만들어진 모든 인스턴스가 공유하는 데이터

class Example:
    num = 5 ## 클래스 멤버 변수
    
    ## 초기자 인스턴스 변수 0을 초기화
    def __init__(self):
        self.no = 0

    ## 인스턴스 변수 num 을 출력
    def show_num(self):
        print(self.no)

    ## 인스턴스 변수 num 에 3을 더함
    def add_num(self):
        self.no = self.no + self.num
    
    ## 인스턴스 변수 num 에 3을 뺌
    def subtract_num(self):
        self.no = self.no - self.numㄴ

e1 = Example() ## 1번 인스턴스 생성

print("초기화된 인스턴스 변수 값")
e1.show_num()

print("인스턴스 변수 값을 클래스 변수를 통해 변경(더하기)")
e1.add_num()
e1.show_num()

print("인스턴스 변수 값을 클래스 변수를 통해 변경(빼기))")
e1.subtract_num()
e1.show_num()

e2 = Example() ## 2번 인스턴스 생성
print("초기화된 인스턴스 변수 값")
e2.show_num()

print("클래스 변수값 변경 5=3")
e2.num = 3

print("인스턴스 변수 값을 클래스 변수를 통해 변경(더하기)")
e2.add_num()
e2.show_num()

print("인스턴스 변수 값을 클래스 변수를 통해 변경(빼기))")
e2.subtract_num()
e2.show_num()


print("----- 특정 인스턴스만 값을 변경할 때 클래스 변수의 값 변경을 통해 인스턴스 변수의 값을 적용 -----")
## e1 객체는 초기화된 인스턴스 변수값 0에서 5가 더해지고 5가 빠져 최종 0의 값을 갖는다.
e1.show_num()
## e2 객체는 초기화된 인스턴스 변수값 0에서 5가 더해지고 5가 빠져 최종 0의 값을 가져야하지만 클래스 변수를 중간에 3으로 변경해 3이 더해지고 3이 빠지는 결과로 0의 값을 갖는다.
e2.show_num()

"""
이로써 클래스로 생성한 인스턴스의 메서드에 고정값을 같는 메서드에서 특정 인스턴스만 값을 변경할 경우 클래스변수 초기화를 통해 값을 변경하는 것이 좀 더 객체지향적인 코드의 구성을 갖는다.
그렇다고 인스턴스 변수를 변경하는 하드코딩이 잘못된 것은 아니다. 단지 재사용성, 효율을 고려하는 것이 더 나은 방법이라는 것을 확인하는 차원이다.
"""